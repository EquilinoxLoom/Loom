package equilinox;

import loom.entity.Entity;

import java.util.Arrays;
import java.util.List;

/*
TRANSFORM, MESH, SPREADER, DECAY, PROJECTILE, TIME_OUT, TONGUE_SHOOT, MATERIAL, ITEM, INFO, BUILD, DECOMPOSE, HIVE,
LIFE, SOUND_LOOPER, BLOOM, FLY_TRAP, FRUITER, GROWTH, MOVEMENT, AI, FOOD, FRUIT_FALL, LILY, SUN_FACER, WOOD,
BUILDER, EATING, FISH_HUNT, HEALER, BEAVER, PANIC, STINGING, BURROW, CHARGE, NESTING, PEACOCK, PERCHER,
TREE_SWING, PERCH, EQUIP, PARTICLES, BIRD_HUNT, SPITTING, BEE, FLINGING, NAME, SOUND, RANDOM_SOUNDER, FIGHT, HUNT,
SLEEP, FLEE, DROP, HOSTILE;
 */
public enum VanillaComponent {
    TRANSFORM,
    MESH,
    INFO(TRANSFORM),
    LIFE(TRANSFORM, INFO),
    GROWTH(TRANSFORM, LIFE, INFO),
    MATERIAL,
    FOOD,
    /*
    Eating sections other than SAMPLE requires MESH, FRUIT and ROOT_VEG require INFO, LIFE and TRANSFORM, and FRUIT
    also requires FRUITER and GROWTH. HONEY requires HIVE and BUILD.
     */
    SPREADER,
    MOVEMENT(TRANSFORM, MESH, LIFE, GROWTH, INFO),
    AI(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT), //Bird AI requires PERCHER
    WOOD,
    PERCH(TRANSFORM, LIFE, INFO),
    FLEE(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    EATING(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    NAME,
    FRUITER(TRANSFORM, MESH, LIFE, GROWTH, INFO),
    DROP,
    PARTICLES(TRANSFORM, MESH),
    DECAY,
    SOUND(TRANSFORM),
    RANDOM_SOUNDER(TRANSFORM, SOUND),
    FRUIT_FALL(TRANSFORM, MESH, LIFE, GROWTH, INFO, FRUITER),
    NESTING(TRANSFORM, INFO),
    BUILDER(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT),
    BUILD(MESH),
    EQUIP(TRANSFORM, LIFE, INFO),
    PERCHER,
    FIGHT(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    ITEM,
    SLEEP(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    HOSTILE(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, EQUIP, AI, FIGHT),
    FLINGING(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    HUNT(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, EQUIP, AI, FIGHT),
    HEALER,
    TIME_OUT,
    TREE_SWING(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    PEACOCK(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    LILY(TRANSFORM),
    TONGUE_SHOOT(TRANSFORM),
    BIRD_HUNT(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    BURROW(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI, FLEE),
    FISH_HUNT(TRANSFORM, MESH, LIFE, GROWTH, INFO),
    FLY_TRAP(TRANSFORM, MESH, LIFE, GROWTH, INFO),
    BLOOM(TRANSFORM, MESH, LIFE, GROWTH, INFO),
    SPITTING(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    DECOMPOSE(MESH, BUILD),
    HIVE(MESH, BUILD),
    PANIC(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    BEE(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT),
    BEAVER(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, EQUIP, AI),
    SUN_FACER(TRANSFORM),
    STINGING(TRANSFORM, LIFE, GROWTH, INFO),
    CHARGE(TRANSFORM, MESH, LIFE, GROWTH, INFO, MOVEMENT, AI),
    SOUND_LOOPER(TRANSFORM),
    PROJECTILE(TRANSFORM);

    private final List<VanillaComponent> requirements;

    VanillaComponent(VanillaComponent... requirements) {
        this.requirements = Arrays.asList(requirements);
    }

    public List<VanillaComponent> getRequirements() {
        return requirements;
    }

    public boolean check(Entity entity) {
        return requirements.stream().allMatch(entity::hasComponent);
    }
}
